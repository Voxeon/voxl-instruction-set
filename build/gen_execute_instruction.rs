use crate::config::*;
use crate::constants::*;
use crate::open_file_writing;
use rmod_gen::rust_component::Visibility;
use rmod_gen::{RustFile, RustMethod, RustText, RustTrait};
use std::io::Write;

pub fn generate_execute_trait(instructions: &InstructionDetails) {
    let mut file = RustFile::new()
        .with_import(&format!(
            "use crate::instruction_arguments::{{{}, {}, {}}}",
            REGISTER_TYPE_NAME, ADDRESS_TYPE_NAME, IMMEDIATE_TYPE_NAME
        ))
        .with_import(&format!("use crate::instruction::{}", OPCODE_ENUM_NAME))
        .with_import("use crate::syscall_handler::SyscallHandler")
        .with_top_string("/*\nNOTE: THIS FILE IS AUTOGENERATED.\n*/\n");

    let mut execute_trait = RustTrait::new(EXECUTE_TRAIT_NAME)
        .with_component(RustText::new("type Output;\n").into())
        .with_visibility(Visibility::Public);

    let general_execute_method = RustMethod::new("execute_instruction")
        .with_template(&format!("M: {}", EXECUTE_TRAIT_NAME))
        .with_template("S: SyscallHandler<M>")
        .with_argument("&mut self")
        .with_argument(&format!("instruction: {}", OPCODE_ENUM_NAME))
        .with_argument("handler: &mut S")
        .with_return_type("Self::Output")
        .with_body(&format!(
            "return match instruction {{\n{}}};\n",
            instructions
                .iter()
                .map(|instruction| {
                    let mut field_names = Vec::new();

                    let mut reg_count = 0;
                    let mut imm_count = 0;
                    let mut add_count = 0;

                    for field in &instruction.fields {
                        if field == REGISTER_TYPE_NAME {
                            field_names.push(format!(
                                "r{}",
                                if reg_count == 0 {
                                    String::new()
                                } else {
                                    reg_count.to_string()
                                }
                            ));

                            reg_count += 1;
                        } else if field == IMMEDIATE_TYPE_NAME {
                            field_names.push(format!(
                                "i{}",
                                if imm_count == 0 {
                                    String::new()
                                } else {
                                    imm_count.to_string()
                                }
                            ));

                            imm_count += 1;
                        } else if field == ADDRESS_TYPE_NAME {
                            field_names.push(format!(
                                "a{}",
                                if add_count == 0 {
                                    String::new()
                                } else {
                                    add_count.to_string()
                                }
                            ));

                            add_count += 1;
                        }
                    }

                    let field_string = field_names.join(", ");

                    if field_string.len() > 0 {
                        if instruction.short_name == "syscall" {
                            format!(
                                "\t{}::{}({}) => self.execute_{}(handler, {}),\n",
                                OPCODE_ENUM_NAME,
                                &instruction.name,
                                &field_string,
                                &instruction.short_name,
                                field_string,
                            )
                        } else {
                            format!(
                                "\t{}::{}({}) => self.execute_{}({}),\n",
                                OPCODE_ENUM_NAME,
                                &instruction.name,
                                &field_string,
                                &instruction.short_name,
                                field_string,
                            )
                        }
                    } else {
                        format!(
                            "\t{}::{} => self.execute_{}(),\n",
                            OPCODE_ENUM_NAME, &instruction.name, &instruction.short_name
                        )
                    }
                })
                .collect::<String>()
        ));

    execute_trait.push_component(general_execute_method.into());

    for instruction in instructions {
        let mut method = RustMethod::new(&format!("execute_{}", instruction.short_name))
            .with_argument("&mut self")
            .with_return_type("Self::Output")
            .without_body();

        if instruction.short_name == "syscall" {
            method.push_template(&format!("M: {}", EXECUTE_TRAIT_NAME));
            method.push_template("S: SyscallHandler<M>");
            method.push_argument("handler: &mut S");
        }

        let mut reg_count = 0;
        let mut imm_count = 0;
        let mut add_count = 0;

        for field in &instruction.fields {
            if field == REGISTER_TYPE_NAME {
                method.push_argument(&format!(
                    "r{}: {}",
                    if reg_count == 0 {
                        String::new()
                    } else {
                        reg_count.to_string()
                    },
                    REGISTER_TYPE_NAME
                ));

                reg_count += 1;
            } else if field == IMMEDIATE_TYPE_NAME {
                method.push_argument(&format!(
                    "i{}: {}",
                    if imm_count == 0 {
                        String::new()
                    } else {
                        imm_count.to_string()
                    },
                    IMMEDIATE_TYPE_NAME
                ));

                imm_count += 1;
            } else if field == "Address" {
                method.push_argument(&format!(
                    "a{}: {}",
                    if add_count == 0 {
                        String::new()
                    } else {
                        add_count.to_string()
                    },
                    ADDRESS_TYPE_NAME
                ));

                add_count += 1;
            }
        }

        execute_trait.push_component(method.into());
    }

    file.push_component(execute_trait.into());

    let mut output_file = open_file_writing(EXECUTE_OUTPUT_PATH);

    output_file
        .write_all(file.to_rust_code().as_bytes())
        .expect("Unable to write execute trait file.");
}
